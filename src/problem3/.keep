/*  1. First of all, both interface are used to define the shape of objects that hold information about Wallet 
and both of them are provide same structure with the currency and amount

interface WalletBalance {
  currency: string;
  amount: number;
}
interface FormattedWalletBalance {
  currency: string;
  amount: number;
  formatted: string;
}

2. Secondly, const getPriority = (blockchain: any): number => Using string instead of any in the getPriority function 
because ensure that the blockchain parameter is expected to be a string reducing the rick of passing incorrect types

3. Next, 
if (lhsPriority > -99) {
  if (balance.amount <= 0) {
    return true;
  }
}
we can replace this  it more optimal and concise
=====> return balancePriority > -99 && balance.amount > 0;
 
Similarly,

if (leftPriority > rightPriority) {
	return -1;
} else if (rightPriority > leftPriority) {
	return 1;
}
=====> return rightPriority - leftPriority;

Finally, 
<WalletRow 
  className={classes.row}
  key={index}
  amount={balance.amount}
  usdValue={usdValue}
  formattedAmount={balance.formatted}
/>

in here, we should set the unique key

<WalletRow 
  className={classes.row}
  key={balance.currency}
  amount={balance.amount}
  usdValue={usdValue}
  formattedAmount={balance.formatted}
/>
Using index can lead to unstable keys if the list items are reordered or if items are added/removed. 
In contrast, currency remains constant for each balance.
*/


interface WalletBalance {
  currency: string;
  amount: number;
  blockchain: string;
}

interface FormattedWalletBalance extends WalletBalance {
  formatted: string;
}

interface Props extends BoxProps {}
const WalletPage: React.FC<Props> = (props: Props) => {
  const { children, ...rest } = props;
  const balances = useWalletBalances();
  const prices = usePrices();

	const getPriority = (blockchain: string): number => {
	  switch (blockchain) {
	    case 'Osmosis':
	      return 100
	    case 'Ethereum':
	      return 50
	    case 'Arbitrum':
	      return 30
	    case 'Zilliqa':
	      return 20
	    case 'Neo':
	      return 20
	    default:
	      return -99
	  }
	}

  const sortedBalances = useMemo(() => {
    return balances.filter((balance: WalletBalance) => {
		  const balancePriority = getPriority(balance.blockchain);
		  return balancePriority > -99 && balance.amount > 0;
		}).sort((lhs: WalletBalance, rhs: WalletBalance) => {
			const leftPriority = getPriority(lhs.blockchain);
		  const rightPriority = getPriority(rhs.blockchain);
		  if (leftPriority > rightPriority) {
		    return -1;
		  } else if (rightPriority > leftPriority) {
		    return 1;
		  }
    });
  }, [balances, prices]);

  const formattedBalances = sortedBalances.map((balance: WalletBalance) => {
    return {
      ...balance,
      formatted: balance.amount.toFixed()
    }
  })

  const rows = sortedBalances.map((balance: FormattedWalletBalance, index: number) => {
    const usdValue = prices[balance.currency] * balance.amount;
    return (
      <WalletRow 
        className={classes.row}
        key={index}
        amount={balance.amount}
        usdValue={usdValue}
        formattedAmount={balance.formatted}
      />
    )
  })

  return (
    <div {...rest}>
      {rows}
    </div>
  )
}